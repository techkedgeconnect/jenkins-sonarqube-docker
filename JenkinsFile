pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'techkedgec0nnect/techkedgeconnect-sample-website'
        DOCKER_TAG = 'latest'
        DOCKER_REGISTRY = 'index.docker.io'
        DOCKER_REGISTRY_CREDENTIALS = 'a28dffc9-3285-402a-a58b-40d008fa0506'  // Replace with your Docker Hub credentials ID
        SONARQUBE_SERVER = 'SonarScanner-Server'  // Replace with your SonarQube server name in Jenkins
    }
    }

    stages {
        stage('Git Checkout') {
            steps {
                // Checkout the code from your repository
                git branch: 'main', url: 'https://github.com/techkedgeconnect/jenkins-sonarqube-docker.git'
            }
        }

        stage('SonarQube Scan') {
            steps {
                script {
                    // Run SonarQube scanner
                    withSonarQubeEnv(SONARQUBE_SERVER) {
                        sh 'sonar-scanner -Dsonar.projectKey=sonar.projectKey=CSS-Website-Pipeline -Dsonar.sources=. -Dsonar.host.url=http://18.170.65.230:9000/ -Dsonar.login=sqa_de758403c1a67060b3885ef7f4ef1f480fbdbe06'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image
                    docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Login to Docker Hub
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_REGISTRY_CREDENTIALS}", passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh "echo \$DOCKER_PASSWORD | docker login -u \$DOCKER_USERNAME --password-stdin docker.io"
                        // Push the Docker image to the registry
                        docker.image("${DOCKER_IMAGE}:${DOCKER_TAG}").push()
                    }
                }
            }
        }

        stage('Deploy Docker Container') {
            steps {
                script {
                    def containerName = 'techkedgeconnect-sample-website'
                    // Stop and remove any existing container
                    sh "docker rm -f ${containerName} || true"  
                                 
                    // Run the Docker container
                    sh "docker run -d --name ${containerName} -p 3000:80 techkedgeconnect-sample-website:latest"
                    
                }
            }
        }
    }

    post {
        always {
            // Clean up workspace
            cleanWs()
        }
    }
}
